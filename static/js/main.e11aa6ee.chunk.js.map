{"version":3,"sources":["p2-homeworks/h3/Greeting.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h4/common/c2-SuperButton/AlternativeSuperButton.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/common/c2-SuperButton/AlternativeSuperButton.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","default","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","superInput","errorInput","e","currentTarget","value","key","Greeting","name","setNameCallback","addUser","onKeyPressHandler","totalUsers","inputClass","someClass","container","btn","onClick","GreetingContainer","users","addUserCallback","useState","setName","setError","alert","length","HW3","setUsers","addedUser","_id","v1","SuperCheckbox","onChangeChecked","children","checkbox","lab","checked","AlternativeSuperButton","HW4","text","setText","showAlert","setChecked","column","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e11aa6ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"someClass\":\"Greeting_someClass__33DOZ\",\"error\":\"Greeting_error__2VpjI\",\"container\":\"Greeting_container__24VYH\",\"btn\":\"Greeting_btn__1-ycI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1YPZb\",\"red\":\"SuperButton_red__35gXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3peQD\",\"errorInput\":\"SuperInputText_errorInput__3QHCb\",\"error\":\"SuperInputText_error__vnhPq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lab\":\"SuperCheckbox_lab__1zoLR\",\"checkbox\":\"SuperCheckbox_checkbox__m73lH\",\"spanClassName\":\"SuperCheckbox_spanClassName__2_k0_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__YW9It\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__3O7r3\",\"column\":\"HW4_column__5CLly\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"AlternativeSuperButton_btn__3Iu-0\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\nimport s from \"./SuperButton.module.css\";\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = ` ${s.default} ${red ? s.red : s.default} ${className}`;\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    );\n}\n\nexport default SuperButton;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\nimport {log} from \"util\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\n    const finalInputClassName = `${s.superInput} ${error ? s.errorInput : \"\" } `; // need to fix with (?:) and s.superInput\n\n    return (\n        <>\n            <input\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    );\n}\n\nexport default SuperInputText;\n","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport s from \"./Greeting.module.css\";\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\nimport SuperInputText from \"../h4/common/c1-SuperInputText/SuperInputText\";\n\ntype GreetingPropsType = {\n    name: string,\n    setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void\n    addUser: () => void,\n    onKeyPressHandler: (e: KeyboardEvent<HTMLInputElement>) => void,\n    error: string,\n    totalUsers: number,\n}\n\n// презентационная компонента (для верстальщика)\nconst Greeting: React.FC<GreetingPropsType> = (\n    {name, setNameCallback, addUser, onKeyPressHandler, error, totalUsers} // деструктуризация пропсов\n) => {\n    const inputClass = (name ===\"\") ? s.error : s.someClass; // need to fix with (?:)\n\n    return (\n        <div className={s.container}>\n            <SuperInputText value={name} onKeyPress={onKeyPressHandler} onChange={setNameCallback} error={error} className={inputClass}/>\n            <div className={s.btn}><SuperButton onClick={addUser}>add</SuperButton></div>\n            <p>Количество добавленных имен: {totalUsers}</p>\n        </div>\n    );\n}\n\nexport default Greeting;\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport Greeting from \"./Greeting\";\nimport {UserType} from \"./HW3\";\n\ntype GreetingContainerPropsType = {\n    users: Array<UserType> ,\n    addUserCallback: (name: string) => void,\n}\n\n// более простой и понятный для новичков\n// function GreetingContainer(props: GreetingPropsType) {\n\n// более современный и удобный для про :)\n// уровень локальной логики\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\n    const [name, setName] = useState<string>(\"\");\n    const [error, setError] = useState<string>(\"\");\n\n    const setNameCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.value !== \"\") {setError(\"\")};\n        setName(e.currentTarget.value);\n    }\n    const addUser = () => {\n        if (name !== \"\") {\n            addUserCallback(name);\n            alert(`Hello  ${name}`);\n            setName(\"\");\n        } else {\n            setError(\"Введите имя!\")\n        }\n    };\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addUser();\n        };\n    };\n\n    const totalUsers = users.length;\n\n    return (\n        <Greeting\n            name={name}\n            setNameCallback={setNameCallback}\n            addUser={addUser}\n            onKeyPressHandler={onKeyPressHandler}\n            error={error}\n            totalUsers={totalUsers}\n        />\n    );\n}\n\nexport default GreetingContainer;\n","import React, {useState} from \"react\";\nimport GreetingContainer from \"./GreetingContainer\";\nimport {v1} from \"uuid\"\n\n// types\nexport type UserType = {\n    _id: string,\n    name: string,\n}\n\n// уровень работы с глобальными данными\nfunction HW3() {\n    const [users, setUsers] = useState<Array<UserType>>([]);\n    const addUserCallback = (name: string) => {\n        const addedUser = {\n            _id: v1(),\n            name: name,\n        }\n        setUsers([addedUser, ...users]);\n    }\n\n    return (\n        <div>\n            <hr/>\n            homeworks 3\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\n            <hr/>\n            {/*для личного творчества, могу проверить*/}\n            {/*<AlternativeGreeting/>*/}\n            <hr/>\n        </div>\n    );\n}\n\nexport default HW3;\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked :boolean) => void,\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e);\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\n        // сделайте так чтоб работал onChange и onChangeChecked\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label className={s.lab}>\n            <input\n                type={\"checkbox\"}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <div className={s.spanClassName}>{children}</div>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;\n","import React from \"react\";\nimport s from \"./AlternativeSuperButton.module.css\"\n\nfunction AlternativeSuperButton() {\n    return (\n        <div>\n            <div className={s.btn}>Demo</div>\n        </div>\n    );\n}\n\nexport default AlternativeSuperButton;\n","import React, {ChangeEvent, useState} from \"react\";\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\nimport s from \"./HW4.module.css\";\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\nimport AlternativeSuperButton from \"./common/c2-SuperButton/AlternativeSuperButton\";\n\nfunction HW4() {\n    const [text, setText] = useState<string>(\"\");\n    const error = text ? \"\" : \"Введите текст\";\n    const showAlert = () => {\n        if (error) {\n            alert(\"введите текст...\");\n        } else {\n            alert(text); // если нет ошибки показать текст\n        }\n    }\n\n    const [checked, setChecked] = useState<boolean>(true);\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked);\n\n    return (\n        <div>\n            <hr/>\n            homeworks 4\n\n            <div className={s.column}>\n                {/*should work (должно работать)*/}\n                <SuperInputText\n                    value={text}\n                    onChangeText={setText}\n                    onEnter={showAlert}\n                    error={error}\n                    // className={s.blue} // проверьте, рабоет ли смешивание классов\n                />\n\n                {/*should work (должно работать)*/}\n                <SuperButton\n                     // пропсу с булевым значением не обязательно указывать true\n                    onClick={showAlert}\n                >\n                    alert {/*// название кнопки попадёт в children*/}\n                </SuperButton>\n\n                {/*should work (должно работать)*/}\n                <SuperCheckbox\n                    checked={checked}\n                    onChangeChecked={setChecked}\n                >\n                    some text {/*// этот текст попадёт в children*/}\n                </SuperCheckbox>\n\n                {/*// onChange тоже должен работать*/}\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\n            </div>\n\n            <hr/>\n            <AlternativeSuperButton/>\n            {/*для личного творчества, могу проверить*/}\n            {/*<AlternativeSuperInputText/>*/}\n            {/*<AlternativeSuperButton/>*/}\n            {/*<AlternativeSuperCheckbox/>*/}\n            <hr/>\n        </div>\n    );\n}\n\nexport default HW4;\n","import React from \"react\";\nimport s from \"./App.module.css\";\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\n\nfunction App() {\n    return (\n        <div className={s.App}>\n            {/*<div>react homeworks:</div>*/}\n            {/*<HW1/>*/}\n            {/*<HW2/>*/}\n            <HW3/>\n            <HW4/>\n            {/*<HW5/>*/}\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./p1-main/m1-ui/u1-app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}